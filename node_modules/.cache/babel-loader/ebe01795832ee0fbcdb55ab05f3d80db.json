{"ast":null,"code":"var _jsxFileName = \"/workspace/testunited/testunited-web-ui/src/components/TestRunInfo.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport TestRunList from './TestRunList';\nexport class TestRunInfo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.baseUrl = \"http://web-api.int.testunited.minikube.local\";\n    this.state = {\n      testRun: undefined\n    };\n  }\n\n  componentDidMount() {\n    axios.get(this.baseUrl + '/testruns/' + this.props.match.params.testRunId).then(res => this.setState({\n      testRun: res.data\n    }));\n  }\n\n  render() {\n    if (this.state.testRun == undefined) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"loading...\");\n    const _this$state$testRun = this.state.testRun,\n          id = _this$state$testRun.id,\n          timeStamp = _this$state$testRun.timeStamp,\n          result = _this$state$testRun.result,\n          testCase = _this$state$testRun.testCase;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Id: \", id, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), \"Time: \", timeStamp, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), \"Test Case: \", testCase != undefined ? testCase.name : \"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), \"Result: \", result ? \"true\" : \"false\", \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default TestRunInfo;","map":{"version":3,"sources":["/workspace/testunited/testunited-web-ui/src/components/TestRunInfo.js"],"names":["React","Component","PropTypes","Link","axios","TestRunList","TestRunInfo","baseUrl","state","testRun","undefined","componentDidMount","get","props","match","params","testRunId","then","res","setState","data","render","id","timeStamp","result","testCase","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAO,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAAA;AAAA;AAAA,SACvCM,OADuC,GAC7B,8CAD6B;AAAA,SAGvCC,KAHuC,GAG/B;AACJC,MAAAA,OAAO,EAAEC;AADL,KAH+B;AAAA;;AAOvCC,EAAAA,iBAAiB,GAAE;AACnBP,IAAAA,KAAK,CAACQ,GAAN,CAAU,KAAKL,OAAL,GAAa,YAAb,GAA0B,KAAKM,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,SAA5D,EACKC,IADL,CACUC,GAAG,IAAI,KAAKC,QAAL,CAAc;AAACV,MAAAA,OAAO,EAAES,GAAG,CAACE;AAAd,KAAd,CADjB;AAEC;;AAGDC,EAAAA,MAAM,GAAG;AACL,QAAG,KAAKb,KAAL,CAAWC,OAAX,IAAsBC,SAAzB,EACI,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAR;AAFC,gCAIqC,KAAKF,KAAL,CAAWC,OAJhD;AAAA,UAIEa,EAJF,uBAIEA,EAJF;AAAA,UAIMC,SAJN,uBAIMA,SAJN;AAAA,UAIiBC,MAJjB,uBAIiBA,MAJjB;AAAA,UAIyBC,QAJzB,uBAIyBA,QAJzB;AAML,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACSH,EADT,OACa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADb,YAEWC,SAFX,EAEqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFrB,iBAGgBE,QAAQ,IAAIf,SAAZ,GAAuBe,QAAQ,CAACC,IAAhC,GAAqC,EAHrD,EAGwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHxD,cAIaF,MAAM,GAAE,MAAF,GAAU,OAJ7B,OAIsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJtC,CADJ;AASH;;AA5BsC;AAgC3C,eAAelB,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom'\nimport axios from 'axios';\nimport TestRunList from './TestRunList';\n\nexport class TestRunInfo extends Component {\n    baseUrl = \"http://web-api.int.testunited.minikube.local\"\n\n    state = {\n        testRun: undefined\n      }\n    \n    componentDidMount(){\n    axios.get(this.baseUrl+'/testruns/'+this.props.match.params.testRunId)\n        .then(res => this.setState({testRun: res.data}))\n    }\n\n\n    render() {\n        if(this.state.testRun == undefined)\n            return (<div>loading...</div>);\n        \n        const {id, timeStamp, result, testCase} = this.state.testRun;\n\n        return (\n            <div>\n                Id: {id} <br/>\n                Time: {timeStamp}<br/>\n                Test Case: {testCase != undefined? testCase.name:\"\"}<br/>\n                Result: {result? \"true\": \"false\"} <br/>\n            </div>\n\n        );\n    }\n}\n\n\nexport default TestRunInfo\n"]},"metadata":{},"sourceType":"module"}